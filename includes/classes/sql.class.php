<?php    /**     * This file contains the class for all sql functions     *      * This class contains all the functions for sql operations     *     */    class Sql    {        /**         * To Connect with database         *         * @return returns database connection object         */        function connectDatabase()        {            global $contollerObj;            $dbConnection = mysql_connect(SERVER_NAME, USER_NAME, PASSWORD);                    	if (!$dbConnection)		  	{		  		if(SITE_MAINTENANCE!='' && $contollerObj->view != SITE_MAINTENANCE ) {								  			global $template_view;		  					  			$template_view = array('view' => SITE_MAINTENANCE, 'template' => true);		  					  		}		  	} else {                mysql_select_db(DATABASE_NAME);            }            return $dbConnection;        }                /**         * To execute any query and return the result         *         * @param str $query        Query to execute         * @param int $returnType   Flag to confirm the return (1: result set, 2: fetched associated array (1 row), 3: affected rows, 4: affected rows, 5: last inserted id)         * @return According to param $returnType varies         */        function executeQuery($query, $returnType = 0)        {            $dbConnection = self::connectDatabase();                        $resultSet = mysql_query($query, $dbConnection);            if ($returnType == 5)                $inserted_id = mysql_insert_id($dbConnection);            /* mysql_close($dbConnection); */            switch ($returnType) {                case 1:                    return $resultSet;                    break;                case 2:                    if ($resultSet)                        return mysql_fetch_array($resultSet);                    else                        die('<b>Error in executing query: </b>' . $query);                    break;                case 3:                    return mysql_affected_rows($dbConnection);                    break;                case 4:                    return mysql_num_rows($resultSet);                    break;                case 5:                    return $inserted_id;                    break;                default:                    return false;                    break;            }        }                /**         * To create inert query         *         * @param str $tableName            Name of the table         * @param array $insertValueArray   Array contains table field names as key and value as value         * @return str Returns the insert query         */        function createInsertQuery($tableName, $insertValueArray)        {            $insertQuery = "INSERT INTO " . $tableName . " (";            foreach (array_keys($insertValueArray) as $insertField)            {                $insertQuery .= str_replace("'", "", $insertField) . ", ";            }            $insertQuery = substr($insertQuery, 0, -2);            $insertQuery .= ") VALUES(";            foreach (array_values($insertValueArray) as $insertValue)            {                $insertQuery .= $insertValue . ", ";            }            $insertQuery = substr($insertQuery, 0, -2);            $insertQuery .= ")";            return $insertQuery;        }            /**         * To create update query         *         * @param str $tableName            	Name of the table         * @param array $updateValueArray   	Array contains table field names as key and value as value         * @param array $updateConditionsArray	Array contains table field names as key and value as value for conditions         * @return str Returns the insert query         */        function createUpdateQuery($tableName, $updateValueArray, $updateConditionsArray)        {            $updateQuery = "UPDATE " . $tableName . " SET ";            foreach ($updateValueArray as $updateField => $updateValue)            {                $updateQuery .= str_replace("'", "", $updateField) . " = ". $updateValue . ", ";            }            $updateQuery = substr($updateQuery, 0, -2);            $updateQuery .= " WHERE ";            foreach ($updateConditionsArray as $conditions => $values)            {                $updateQuery .= $conditions . " = " . $values . " AND ";            }            $updateQuery = substr($updateQuery, 0, -5);            return $updateQuery;        }    }